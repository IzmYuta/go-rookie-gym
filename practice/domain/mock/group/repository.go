// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -package=mock -destination=../mock/group/repository.go
//
// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	group "practice/domain/group"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Group mocks base method.
func (m *MockRepository) Group(db *sql.DB, group *group.Group) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", db, group)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Group indicates an expected call of Group.
func (mr *MockRepositoryMockRecorder) Group(db, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockRepository)(nil).Group), db, group)
}

// Groups mocks base method.
func (m *MockRepository) Groups(db *sql.DB, id int) ([]group.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Groups", db, id)
	ret0, _ := ret[0].([]group.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Groups indicates an expected call of Groups.
func (mr *MockRepositoryMockRecorder) Groups(db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Groups", reflect.TypeOf((*MockRepository)(nil).Groups), db, id)
}
